#!/usr/bin/env bash

set -euo pipefail

default_image=morum/smartpy:0.18.2
SMARTPY_IMAGE=${SMARTPY_IMAGE:-$default_image}

usage () {
    cat <<EOF
Usage:
   $0 test        <script> <output> <options>* (execute all test targets)
   $0 doc         <script> <output>            (document script)

   Parameters:
         <script>              : a script containing SmartPy code
         <output>              : a directory for the results

   Options:
         --protocol <protocol> : optional, select target protocol - default is lima
         --<flag> <arguments>  : optional, set some flag with arguments
         --<flag>              : optional, activate some boolean flag
         --no-<flag>           : optional, deactivate some boolean flag

   Protocols: kathmandu | lima | mumbai"
EOF
}

wd=$(pwd)
uid=$(id -u)
gid=$(id -g)

mountpoints=()

function add_mountpoint() {
    local d=$(realpath "$1")
    set +u # work around for old bash version (default on macOS)
    for x in "${mountpoints[@]}"
    do
        [ "$x" == "$d" ] && return
    done
    set -u
    mountpoints+=("$d")
}

add_mountpoint "$wd"

function run_docker() {
    args=()
    for d in "${mountpoints[@]}"
    do
        local d=$(echo "$d" | sed 's/"/""/g')
        args+=(--mount type=bind,\"source="$d"\",\"target="$d"\")
    done
    docker run --init --rm --user "$uid":"$gid" "${args[@]}" -w "$wd" "$SMARTPY_IMAGE" "$@"
}

function check_args() {
    script="$1"
    output="$2"

    [ -f "$script" ] || { echo "File $script does not exist (or is not a file)." ; exit 1; }
    mkdir -p "$output"

    add_mountpoint "$script"
    mkdir -p $(dirname "$output")
    add_mountpoint "$output"
}

which docker &> /dev/null || { echo 'The SmartPy CLI requires docker: https://docs.docker.com/get-docker/' ; exit 1; }

[ "$#" -lt 1 ] && { usage; exit 1; }
command="$1"
shift

case $command in
    "test")
        [ "$#" -lt 2 ] && { usage; exit 1; }
        script="$1"
        output="$2"
        shift 2
        check_args "$script" "$output"
        run_docker /smartpy/smartpyc "$script" --output "$output" "$@"
        ;;

    "doc")
        [ "$#" -lt 2 ] && { usage; exit 1; }
        script="$1"
        output="$2"
        shift 2
        check_args "$script" "$output"
        run_docker env PYTHONPATH=/smartpy pdoc --html "$script" --force --config sort_identifiers=False -o "$output"
        ;;

    *)
        echo Unknown command: "$command"
        exit 1
esac
